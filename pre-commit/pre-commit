#!/usr/bin/env python

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.


import argparse
import uuid
import os

def command_output(cmd):
    """
    Capture a commands standard output.
    """
    import subprocess
    return subprocess.Popen(
        cmd.split(";"), stdout=subprocess.PIPE).communicate()[0]


def check_path_for_svn_property(repo_path, path, prop_name):
    return command_output("svnlook;propget;" + repo_path + ";" + prop_name + ";" + path)


def handle_added_files(args, added_files, meta_counter):

    for i in range(0, len(added_files)):

        file_name = added_files[i]

        #continue if the added File is a .meta File
        if file_name.endswith(".meta"):
            continue

        # if the next File is the .meta File for this it was added alongside with this File.
        if (i + 1) < len(added_files):
            next_file_name = added_files[i+1]
            if next_file_name == file_name + ".meta":
                #print("Skipping '" + file_name + "' because the .meta File was commited in the same Revision")
                continue

        # In case a Folder is added.
        #if file_name.endswith("/"):
        #    file_name = file_name[:-1]

        #res = command_output("svn;info;file://" + args.repo + "/" + file_name + ".meta")

        # look if this File already has a .meta File commited
        #if len(res) is not 0:
        #    continue

        print("XX: File with Missing .meta:", file_name)
        sys.stderr.write("PRE-COMMIT-HOOK: File added without .meta: '" + file_name + "'\n")
        meta_counter += 1
        sys.stderr.flush()

    return meta_counter


def handle_deleted_files(args, deleted_files, meta_counter):

    for i in range(0, len(deleted_files)):

        file_name = deleted_files[i]

        #continue if the deleted File is a .meta File
        if file_name.endswith(".meta"):
            continue

        # if the next File is the .meta File for this it was added alongside with this File.
        if (i + 1) < len(deleted_files):
            next_file_name = deleted_files[i+1]
            if next_file_name == file_name + ".meta":
                #print("Skipping '" + file_name + "' because the .meta File was also deleted in the same Revision")
                continue

        # In case a Folder is deleted.
        #if file_name.endswith("/"):
        #    file_name = file_name[:-1]

        #res = command_output("svn;info;file://" + args.repo + "/" + file_name + ".meta")

        # look if the .meta file even exists
        #if len(res) is 0:
        #    continue

        print("XX: File deleted without .meta:", file_name)
        sys.stderr.write("PRE-COMMIT-HOOK: File deleted without .meta: '" + file_name + "'\n")
        meta_counter += 1

    return meta_counter


def check_for_meta_and_add_meta(look_cmd, args, unityDataPath):

    def filename(line):
        return line[4:]

    def added(line):
        return line and line[0] in "A"

    def deleted(line):
        return line and line[0] in "D"

    added_files = []
    deleted_files = []

    for line in command_output(look_cmd % "changed").split("\n"):
        tmp_name = filename(line)

        print("Processing: " + tmp_name)
        if not tmp_name.startswith(unityDataPath):
            continue
        print("PASS: " + tmp_name)

        if added(line):
            added_files.append(tmp_name)
            print("XX: Added:", tmp_name)
        elif deleted(line):
            deleted_files.append(tmp_name)
            print("XX: Deleted:", tmp_name)

    if len(added_files) == 0:
        print("No Files were added.")

    if len(deleted_files) == 0:
        print("No Files were deleted.")

    if len(added_files) == 0 and len(deleted_files) == 0:
        return 0

    meta_counter = 0

    if len(added_files) > 0:
        meta_counter = handle_added_files(args, added_files, meta_counter)

    if len(deleted_files) > 0:
        meta_counter = handle_deleted_files(args, deleted_files, meta_counter)

    return meta_counter


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("repo", help="Repository Path")
    parser.add_argument("transaction", help="Transaction Description to run on.")

    args = parser.parse_args()

    prop_output = check_path_for_svn_property(args.repo, ".", "unity:dataPath")
    if not prop_output:
        return 0

    look_cmd = "svnlook;%s;%s;--transaction;%s" % ("%s", args.repo, args.transaction)

    returnCode = check_for_meta_and_add_meta(look_cmd, args, prop_output)
    return returnCode


if __name__ == "__main__":
    import sys
    sys.exit(main())